{"version":3,"sources":["components/Job.jsx","util.js","components/Jobs.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","flexGrow","callBack","a","fetch","res","json","data","Job","React","useState","activeStep","setActiveStep","classes","theme","useTheme","jobs","updateJobs","useEffect","getRemoteJobs","numJobs","length","numPages","Math","ceil","jobsOnCurrentPage","slice","style","textAlign","marginTop","Typography","variant","component","className","map","job","key","id","title","company_name","salary","candidate_required_location","fromNow","publication_date","Button","backgroundColor","color","margin","MobileStepper","steps","position","nextButton","size","onClick","prevActiveStep","disabled","direction","backButton","Jobs","Component","App","aria-label","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a3d7f7b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Moment from 'react-moment';\r\nimport {\r\n    Typography,\r\n    Button\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport WorkOutlineIcon from '@material-ui/icons/WorkOutline';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\r\nimport { apiBase } from '../util';\r\nimport '../App.css';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 400,\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\n\r\nasync function getRemoteJobs(callBack){\r\n    const res = await fetch(`${apiBase}jobs/remote`);\r\n    const data = await res.json()\r\n    // console.log({data})\r\n    callBack(data);\r\n}\r\n\r\nexport default function Job() {\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n  \r\n    const handleNext = () => {\r\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n  \r\n    const handleBack = () => {\r\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    const [jobs, updateJobs] = useState([])\r\n    useEffect(()=>{\r\n        getRemoteJobs(updateJobs)\r\n    },[])\r\n    const numJobs = jobs.length;\r\n    const numPages = Math.ceil(numJobs/21);\r\n    const jobsOnCurrentPage = jobs.slice(activeStep * 21, activeStep * 21 + 21);\r\n    return (\r\n        <>\r\n            <div style={{ textAlign:\"center\", marginTop:\"1em\" }}>\r\n            <Typography variant=\"h4\" component=\"h1\">Latest jobs: {jobs.length} found</Typography>\r\n            </div>\r\n            <div className=\"jobs\">\r\n            {\r\n                jobsOnCurrentPage && jobsOnCurrentPage.map((job)=>(\r\n                <div key={job.id} className=\"job\">\r\n                  <Typography variant=\"h6\"> <WorkOutlineIcon />  {job.title}</Typography>\r\n                  <Typography><BusinessIcon/> {job.company_name}</Typography>\r\n                  { job.salary ? \r\n                    <Typography ><MonetizationOnIcon/>{ job.salary} </Typography> : \" \"\r\n                  }\r\n                    <Typography ><LocationOnIcon/> {job.candidate_required_location}</Typography>\r\n                    <Typography>Posted: <Moment fromNow>{job.publication_date}</Moment></Typography>\r\n                    <div className=\"action-button\"> \r\n                    <Button style={{backgroundColor:\"rgb(243, 37, 37)\", color: \"#ffff\", margin: \"8px\"}} >Apply</Button>\r\n                    <Button style={{backgroundColor:\"dodgerblue\", color: \"#ffff\", margin: \"8px\"}} >Save</Button>\r\n                    </div>\r\n                </div>\r\n                )) \r\n            } \r\n            </div>\r\n<div className=\"paginate\">\r\n            <Typography>Page {activeStep + 1 } of {numPages}</Typography>\r\n    <MobileStepper\r\n      variant=\"dots\"\r\n      steps={numPages}\r\n      position=\"static\"\r\n      activeStep={activeStep}\r\n      className={classes.root}\r\n      nextButton={\r\n        <Button size=\"small\" onClick={handleNext} disabled={activeStep === numPages - 1}>\r\n          Next\r\n          {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n        </Button>\r\n      }\r\n      backButton={\r\n        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n          {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n          Back\r\n        </Button>\r\n      }\r\n    />\r\n</div>\r\n           </>  \r\n    )\r\n}\r\n","const prodApiBase = \"/\";\r\nconst devApiBase = \"http://localhost:3200/\";\r\nexport const apiBase =\r\n  process.env.NODE_ENV === \"development\" ? devApiBase : prodApiBase;","import React, { Component } from 'react'\r\nimport Job from \"./Job\";\r\nconst jobs = [\r\n    {\r\n        \"title\" :\"FullStack developer\",\r\n        \"Salary\":\"N3000\",\r\n        \"location\": \"Remote\"\r\n    },\r\n    {\r\n        \"title\" :\" Laravel developer\",\r\n        \"Salary\":\"N32000\",\r\n        \"location\": \"Remote\"\r\n    },\r\n    {\r\n        \"title\" :\"Frontend developer\",\r\n        \"Salary\":\"N4000\",\r\n        \"location\": \"Remote\"\r\n    }\r\n]\r\nexport default class Jobs extends Component {\r\n    render() {\r\n        return (\r\n          <Job />\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Jobs from \"./components/Jobs\";\nimport SearchBox from './components/SearchBox';\nimport {\n  Typography,\n} from \"@material-ui/core\";\n\n\nfunction App() {\n  return (\n<>\n<div className=\"section-1\">\n  <div className=\"section-1-content\">\n    <h1>Remote Tech Jobs</h1>\n    <Typography className=\"remote-text\" variant=\"h4\" component=\"h1\"> Find your next<span aria-label role=\"img\">ðŸ’¯</span> remote tech job</Typography>\n  </div>\n</div>\n    {/* <SearchBox /> */}\n    <Jobs />\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}